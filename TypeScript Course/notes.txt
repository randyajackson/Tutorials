https://www.leveluptutorials.com/tutorials/level-1-typescript/

--



compiler
------------------------------------------------
Parcel handles the compiler for us.

parcel index.html
(Bundle up this site and start html)

dist and cache folder are created by parcel

http://10.0.0.84:1234/

add to package.json:

"scripts": {
    "start" : "parcel index.html"
  },

Without a parcel plugin its not going to break when a TS file has errors.

TSC is a typescript compiler
without tsc, no way to break on error using parcel

sudo npm install --save-dev parcel-plugin-typescript parcel-bundler

if there is an issue:
sudo npm install --save-dev parcel-plugin-typescript parcel-bundler@1.9.4 



Type descriptions
------------------------------------------------------------------

const isOpen: boolean = false;
This types isOpen to a boolean type.

const name: string = 'Randy';
can't be defined as name is defined in the window object already

const myAge: number = 32;
number can have decimals or ints

const list: number[] = [0,1,2];
for defining number list

const me: [string,number] = ["Randy", 32];
if you know what types are in which positions in the list

enum Job { WebDev, WebDesigner, PM};
const job: Job = Job.WebDev;
using types for enum variables

const phone: any = "Pixel";
const tablet: any = 3;
any is allowed to be any type

const uhoh: never = 10;
never:
A function never returns
A function always throws
let bar: never = 
(() => { throw new Error('Throw my hands in the air like I just dont care') })();
useful in a situation where the return type is 'never'

const sayWord = (word: string) => {
    console.log(word);
};
typing input parameters for functions

const sayWord = (word: string): string => {
    console.log(word);
    return word;
};
typing input and output parameters for functions



